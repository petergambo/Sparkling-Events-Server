generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  EDITOR
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  first_name String
  last_name  String
  password   String
  image_url  String
  isVerified Boolean  @default(false)
  phone      String   @default("")
  otp        String?
  role       UserRole @default(USER)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Logs    Logs[]
  Payment Payment[]
}

enum EVENT_TYPE {
  OUTDOOR
  INDOOR
}

enum STATUS {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Device {
  WEB
  MOBILE
}

model Logs {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  device   Device @default(WEB)
  activity String
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Payment {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  reference   String            @unique
  email       String
  userId      String?           @db.ObjectId
  user        User?             @relation(fields: [userId], references: [id])
  bookingId   String            @db.ObjectId
  booking     Booking           @relation(fields: [bookingId], references: [id])
  amount      Int
  description String
  currency    String            @default("NGN")
  method      String
  status      TransactionStatus @default(PENDING)

  pdfUrl   String?
  imageUrl String?

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILED
  CANCELLED
}

model Gallery {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  description String
  imageUrl    String

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Package {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String @default("")

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt

  PackageBundle PackageBundle[]
}

model Customer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  first_name String
  last_name  String
  email      String
  phone      String
  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt

  Booking Booking[]
}

model PackageBundle {
  id                        String  @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  imageUrl                  String  @default("https://res.cloudinary.com/dimqewtj6/image/upload/decorations-package-details_tghquv.png")
  price                     Int
  guestSizeRange            String
  tagColor                  String  @default("#B9F2FF")
  discountsAndSpecialOffers String?
  offers                    String?
  category                  String  @default("Executive")
  group                     String? @default("Open Garden Event")
  reward                    String?

  packageId String   @db.ObjectId
  package   Package? @relation(fields: [packageId], references: [id])

  features Feature[]

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt

  Booking Booking[]
}





model Feature {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?

  // Connect back to PackageBundle
  packageBundleId String        @db.ObjectId
  packageBundle   PackageBundle @relation(fields: [packageBundleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model Booking {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  reference             String?            @unique
  email                 String
  eventType             String
  guestSize             String
  amount                Int
  date                  DateTime
  venue                 String
  additionalInformation String
  packageId             String            @db.ObjectId
  package               PackageBundle     @relation(fields: [packageId], references: [id])
  customerId            String?           @db.ObjectId
  customer              Customer?         @relation(fields: [customerId], references: [id])
  status                TransactionStatus @default(PENDING)

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt

  Payment Payment[]
}

model Review {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  review   String
  imageUrl String?

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Settings {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  reference   String            @unique
  email       String
  userId      String            @db.ObjectId
  amount      Int
  description String
  currency    String            @default("NGN")
  isTopUp     Boolean?          @default(false)
  status      TransactionStatus @default(PENDING)
  pdfUrl      String?
  imageUrl    String?

  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt
}
